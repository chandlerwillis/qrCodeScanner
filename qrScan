import imaplib
import email
import os
import requests
from pdf2image import convert_from_bytes
from pyzbar.pyzbar import decode
from PIL import Image
from email.header import decode_header

# Gmail configuration
GMAIL_USERNAME = "chandlerwillis1999@gmail.com"
GMAIL_PASSWORD = "password"

# Function to connect to Gmail and process the most recent email
def connect_to_gmail_and_process_most_recent_email():
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(GMAIL_USERNAME, GMAIL_PASSWORD)
    mail.select("inbox")
    print("Connected to Gmail successfully.")

    result, data = mail.search(None, "ALL")
    email_ids = data[0].split()

    if email_ids:
        most_recent_email_id = email_ids[-1]
        result, message_data = mail.fetch(most_recent_email_id, "(RFC822)")
        raw_email = message_data[0][1]
        email_message = email.message_from_bytes(raw_email)

        sender_email = email_message["From"]
        print(f"Processing the most recent email from: {sender_email}")

        for part in email_message.walk():
            if part.get_content_maintype() == "multipart":
                continue
            if part.get("Content-Disposition") is None:
                continue

            filename = part.get_filename()
            if filename:
                filename, charset = decode_header(filename)[0]
                if isinstance(filename, bytes):
                    filename = filename.decode(charset or "utf-8")
                if filename.lower().endswith((".jpg", ".jpeg", ".png")):
                    image_data = part.get_payload(decode=True)
                    image_path = os.path.join(os.getcwd(), filename)
                    with open(image_path, "wb") as image_file:
                        image_file.write(image_data)
                    scan_images_for_qr_code(image_path)
                elif filename.lower().endswith(".pdf"):
                    pdf_data = part.get_payload(decode=True)
                    images = convert_from_bytes(pdf_data)
                    for i, image in enumerate(images):
                        image.save(f"attachment_page_{i + 1}.jpg", "JPEG")
                        scan_images_for_qr_code(f"attachment_page_{i + 1}.jpg")

    mail.logout()

# Function to decode and extract the link from a QR code
def extract_link_from_qr_code(image):
    decoded_objects = decode(image)
    links = []
    if decoded_objects:
        for obj in decoded_objects:
            data = obj.data.decode('utf-8')
            links.append(data)
    return links

# Function to scan images for QR codes
def scan_images_for_qr_code(image_path):
    image = Image.open(image_path)
    links = extract_link_from_qr_code(image)
    if links:
        print(f"QR Code Links in {image_path}:")
        for link in links:
            final_url = follow_redirects(link)
            print(f"Final URL: {final_url}")
    else:
        print(f"No Links Found in {image_path}")

# Function to follow redirects and get the final URL
def follow_redirects(initial_url):
    try:
        response = requests.get(initial_url, allow_redirects=True)
        return response.url
    except Exception as e:
        print(f"Error while following redirects for URL {initial_url}: {str(e)}")
        return initial_url

# Main function
def main():
    connect_to_gmail_and_process_most_recent_email()

if __name__ == "__main__":
    main()

