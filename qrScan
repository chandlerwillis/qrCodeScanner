import imaplib
import email
import requests
import bs4
from pyzbar.pyzbar import decode

# Gmail IMAP configuration
IMAP_SERVER = 'imap.gmail.com'
EMAIL = 'your_email@gmail.com'
PASSWORD = 'your_password'

# QR Code detection function
def detect_qr_code(html_content):
    # Parse the HTML content using BeautifulSoup
    soup = bs4.BeautifulSoup(html_content, 'html.parser')
    
    # Find all the <img> tags in the HTML
    img_tags = soup.find_all('img')
    
    # Iterate through <img> tags and try to decode QR codes
    for img_tag in img_tags:
        img_src = img_tag.get('src', '')
        img_data = img_tag.get('alt', '')
        
        # Check if the image source or alt text contains a QR code
        if 'data:image/png;base64' in img_src and img_data:
            qr_code_data = decode([img_data])
            if qr_code_data:
                return "QR code found!"
    
    return "None"

# Extract HTML content from links function
def extract_html_from_links(links):
    for link in links:
        try:
            # Fetch the HTML content of the linked webpage
            response = requests.get(link)
            if response.status_code == 200:
                # Try to decode using different encodings
                encodings = ['utf-8', 'ISO-8859-1', 'windows-1252']
                for encoding in encodings:
                    try:
                        html_content = response.content.decode(encoding)
                        return html_content
                    except UnicodeDecodeError:
                        continue
        except Exception as e:
            print("Error:", e)
    return None

# Connect to Gmail
mail = imaplib.IMAP4_SSL(IMAP_SERVER)
mail.login(EMAIL, PASSWORD)
mail.select("inbox")

while True:
    # Search for unread emails
    result, data = mail.search(None, 'UNSEEN')
    
    if result == 'OK':
        for num in data[0].split():
            # Fetch email by ID
            result, email_data = mail.fetch(num, '(RFC822)')
            
            if result == 'OK':
                raw_email = email_data[0][1]
                msg = email.message_from_bytes(raw_email)
                
                # Check for text content and extract links
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            try:
                                text = part.get_payload(decode=True).decode('utf-8')
                            except UnicodeDecodeError:
                                text = part.get_payload(decode=True).decode('ISO-8859-1')
                            # Implement code to extract links from 'text'
                            links = []  # Placeholder for extracted links
                            # Extract links from 'text' and add them to 'links' list

                            # Extract HTML content from links
                            html_content = extract_html_from_links(links)
                            if html_content:
                                # Detect QR codes in the HTML content
                                result = detect_qr_code(html_content)
                                print(result)
                
    time.sleep(60)  # Check for new emails every minute

# Close the IMAP connection
mail.logout()
