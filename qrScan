import imaplib
import email
import os
from email.header import decode_header
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from PIL import Image
from pyzbar.pyzbar import decode
import shutil
from pdf2image import convert_from_path

# Function to connect to Gmail
def connect_to_gmail(username, password):
    # Connect to Gmail using IMAP
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(username, password)
    mail.select("inbox")
    return mail

# Function to check for new emails
def check_for_new_emails(mail):
    result, data = mail.uid("search", None, "UNSEEN")
    email_ids = data[0].split()
    return email_ids

# Function to download attachments
def download_attachments(mail, email_id):
    result, message_data = mail.uid("fetch", email_id, "(RFC822)")
    raw_email = message_data[0][1]
    email_message = email.message_from_bytes(raw_email)
    attachments = []

    for part in email_message.walk():
        if part.get_content_maintype() == "multipart":
            continue
        if part.get("Content-Disposition") is None:
            continue

        filename = part.get_filename()
        if filename:
            filename = decode_header(filename)[0][0]
            if isinstance(filename, bytes):
                filename = filename.decode()
            attachments.append((filename, part.get_payload(decode=True)))

    return attachments

# Function to take a screenshot of a webpage
def take_screenshot(url, output_path):
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Run in headless mode (without GUI)
    driver = webdriver.Chrome(options=chrome_options)
    driver.get(url)
    driver.save_screenshot(output_path)
    driver.quit()

# Function to check for QR codes in images
def check_for_qr_code(image_path):
    image = Image.open(image_path)
    decoded_objects = decode(image)
    return decoded_objects

# Function to convert PDF to images
def convert_pdf_to_images(pdf_filename):
    images = convert_from_path(pdf_filename)
    return images

# Function to create a folder if it doesn't exist
def create_folder(folder_path):
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

# Function to delete a file
def delete_file(file_path):
    if os.path.exists(file_path):
        os.remove(file_path)

# Function to process emails
def process_emails(username, password):
    mail = connect_to_gmail(username, password)
    email_ids = check_for_new_emails(mail)

    for email_id in email_ids:
        attachments = download_attachments(mail, email_id)
        for filename, data in attachments:
            file_extension = os.path.splitext(filename)[1].lower()
            if file_extension in (".jpg", ".jpeg", ".png", ".pdf"):
                with open(filename, "wb") as file:
                    file.write(data)
                if file_extension in (".jpg", ".jpeg", ".png"):
                    qr_code_results = check_for_qr_code(filename)
                    if qr_code_results:
                        print(f"QR Code Found in {filename}")
                    else:
                        print(f"No QR Code Found in {filename}")
                elif file_extension == ".pdf":
                    pdf_images = convert_pdf_to_images(filename)
                    for i, pdf_image in enumerate(pdf_images):
                        pdf_image.save(f"{filename}_page_{i + 1}.jpg", "JPEG")
                        qr_code_results = check_for_qr_code(f"{filename}_page_{i + 1}.jpg")
                        if qr_code_results:
                            print(f"QR Code Found in {filename}_page_{i + 1}.jpg")
                        else:
                            print(f"No QR Code Found in {filename}_page_{i + 1}.jpg")

                # Assuming you want to save screenshots and attachments in separate folders
                screenshot_folder = "screenshots"
                attachment_folder = "attachments"
                create_folder(screenshot_folder)
                create_folder(attachment_folder)

                if file_extension in (".jpg", ".jpeg", ".png"):
                    screenshot_path = os.path.join(screenshot_folder, filename)
                    shutil.move(filename, screenshot_path)
                elif file_extension in (".pdf"):
                    attachment_path = os.path.join(attachment_folder, filename)
                    shutil.move(filename, attachment_path)

                # Delete the file after processing
                delete_file(filename)

# Main function
if __name__ == "__main__":
    username = "your_email@gmail.com"
    password = "your_password"
    process_emails(username, password)

